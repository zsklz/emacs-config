#+TITLE: zsklz emacs config

* Packages
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src
* UI
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (load-theme 'modus-vivendi)
  (add-to-list 'default-frame-alist
	       '(font . "Ubuntu Mono-18"))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (setq whitespace-style '(face space-mark))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;;(add-hook 'prog-mode-hook 'whitespace-mode)
  (setq column-number-mode t)
#+end_src
* Org
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c k") #'org-capture)
  (setq org-directory "~/Org/")
  (setq org-agenda-window-setup 'only-window)
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps t)
  (setq org-tags-column 0)
  (add-to-list 'org-modules 'org-habit)
  (eval-after-load 'org
    '(org-load-modules-maybe t))
  (setq org-todo-keywords
	'((sequence
	   "TODO(t)"
	   "NEXT(n)"
	   "|"
	   "DONE(d)")))

  (setq org-capture-templates '(("i" "[inbox]" entry
				 (file "~/Org/inbox.org")
				 "* %?")
				("d" "[diary]" plain
				 (file+olp+datetree "~/Org/diary.org"))))

  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)
			     ("~/Org/someday.org" :maxlevel . 5)))

  (setq-default bookmark-set-fringe-mark nil)
  (setq org-log-done 'time)
  (setq org-archive-location "~/Org/archive.org::datetree/")
  (setq org-archive-save-context-info '(category olpath itags ltags))
  (setq org-archive-subtree-save-file-p t)
  (setq org-startup-folded t)
  (setq org-todo-repeat-to-state t)
  (setq org-stuck-projects '("+project-someday-maybe/-DONE" ("NEXT")))
  (setq org-tags-exclude-from-inheritance '("project"))
  ;; Agenda
  (setq org-agenda-prefix-format
	'((agenda . "  %-10t%(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))%s")
	  (todo . "  %(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))")
	  (tags . "  %(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))")
	  (search . "  %(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))")))
  (setq org-agenda-current-time-string "> now <"
	org-agenda-time-grid
	'((daily today require-timed)
	  (800 1000 1200 1400 1600 1800 2000)
	  " " "")
	org-agenda-use-time-grid nil
	org-agenda-breadcrumbs-separator "/"
	org-habit-graph-column 60
	org-agenda-start-on-weekday nil
	org-agenda-skip-scheduled-if-done t
	org-agenda-skip-deadline-if-done t
	org-agenda-skip-timestamp-if-done t
	org-agenda-todo-ignore-scheduled 'future
	org-agenda-todo-ignore-timestamp 'future)
  (setq org-agenda-custom-commands
	'(("i" "Inbox"
	   ((tags "inbox"
		  ((org-agenda-overriding-header "Inbox:")
		   (org-agenda-files '("~/Org/inbox.org"))
		   (org-agenda-prefix-format "  ")))))
	  ("w" "Waiting List"
	   ((tags "wait"
		  ((org-agenda-overriding-header "Waiting List:")
		   (org-agenda-prefix-format "  %(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))")))))
	  ("c" "Completed Today"
	   ((tags "CLOSED>=\"<today>\""
		  ((org-agenda-overriding-header "Completed Today:")
		   (org-agenda-prefix-format " %(if (org-get-category) (format \"(%s) \" (org-get-category)) (string))")))))))

  (defun my-sitemap-format-entry (entry style project)
    (cond ((not (directory-name-p entry))
	   (format "%s - [[file:%s][%s]]"
		   (format-time-string "%Y-%m-%d" (org-publish-find-date entry project))
		   entry
		   (org-publish-find-title entry project)))
	  ((eq style 'tree)
	   ;; Return only last subdir.
	   (file-name-nondirectory (directory-file-name entry)))
	  (t entry)))

  ;; zsklz.com
  (setq org-publish-project-alist
	'(("zsklz.com"
	   :base-directory "~/Public/zsklz.com/content/"
	   :publishing-directory "~/Public/zsklz.com/public/"
	   :publishing-function org-html-publish-to-html
	   :section-numbers nil
	   :with-toc nil
	   :recursive t
	   :html-doctype "html5"
	   :html-html5-fancy t
	   :html-postamble nil
	   ;; :html-link-home 
	   ;; :auto-sitemap t
	   ;; :sitemap-style list
	   ;; :sitemap-format-entry my-sitemap-format-entry
	   ;; :sitemap-sort-files anti-chronologically
	   ;; :sitemap-title "zsklz.com sitemap:"
	   )))

#+end_src
* Elfeed
#+begin_src emacs-lisp
     (use-package elfeed
     :ensure t
     :init
     (add-hook 'elfeed-search-mode-hook #'elfeed-update))
     (defun elfeed-play-with-mpv ()
     "Play entry link with mpv."
     (interactive)
     (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
     (message "Opening link with mpv...")
     (start-process "elfeed-mpv" nil "mpv"  (elfeed-entry-link entry))))
     (define-key elfeed-search-mode-map "m" #'elfeed-play-with-mpv)

  (use-package elfeed-org
       :ensure t
       :init
       (setq rmh-elfeed-org-files (list "~/Org/elfeed.org"))
       :config
       (elfeed-org))
#+end_src
* Which-key
#+begin_src emacs-lisp
      (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+end_src
* Vertico
#+begin_src emacs-lisp
  (use-package vertico
  :ensure t
  :init
  (vertico-mode))
#+end_src

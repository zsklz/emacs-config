#+TITLE: Zsmacs

* Packages
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src
* UI
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (load-theme 'modus-vivendi)
  (add-to-list 'default-frame-alist
	       '(font . "Ubuntu Mono-18"))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (setq whitespace-style '(face space-mark))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;;(add-hook 'prog-mode-hook 'whitespace-mode)
  (setq column-number-mode t)
#+end_src
* Org
#+begin_src emacs-lisp
   (global-set-key (kbd "C-c a") #'org-agenda)
   (global-set-key (kbd "C-c c") #'org-capture)
   (setq org-directory "~/Org/")
   (setq org-roam-directory (file-truename "~/Org/Roam"))
   (setq org-agenda-window-setup 'only-window)
   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps t)
   (add-to-list 'org-modules 'org-habit)
   (eval-after-load 'org
   '(org-load-modules-maybe t))
   (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "NEXT(n)"
           "TICK(T)"
           "|"
           "DONE(d)")))

 (setq org-agenda-files '("~/Org/inbox.org"
                          "~/Org/gtd.org"))

 (setq org-capture-templates '(("i" "[inbox]" entry
                               (file "~/Org/inbox.org")
                               "* %?")))

 (setq org-refile-targets '(("~/Org/gtd.org" :maxlevel . 3)
                           ("~/Org/someday.org" :maxlevel . 3)))

 (setq-default bookmark-set-fringe-mark nil)
 (setq org-log-done 'time)
 (setq org-archive-location "~/Org/Archive/2023-archive.org::datetree/")
 (setq org-archive-save-context-info '(olpath itags ltags))
 (setq org-startup-folded t)
 (setq org-todo-repeat-to-state t)
 (setq org-stuck-projects '("+LEVEL=1+project/-DONE" ("TODO" "NEXT")))
 (setq org-tags-exclude-from-inheritance '("project"))

 (setq org-agenda-custom-commands
      '(("g" "GTD agenda"
         ((agenda ""
                ((org-agenda-span 'day)
                 (org-agenda-start-day "")
                 (org-agenda-prefix-format "  %s%?b%?-12t")
                 (org-agenda-current-time-string "> now <")
                 (org-agenda-skip-scheduled-if-done t)
                 (org-agenda-skip-deadline-if-done t)
                 (org-agenda-skip-timestamp-if-done t)
                 (org-agenda-files '("~/Org/gtd.org"))))
          (todo "NEXT"
                ((org-agenda-overriding-header "\nNext actions:")
                 (org-agenda-prefix-format "  %?b%? e")
                 (org-agenda-files '("~/Org/gtd.org"))))
           (todo "TODO"
                ((org-agenda-overriding-header "\nTasks:")
                 (org-agenda-prefix-format "  %?b%? e")
                 (org-agenda-files '("~/Org/gtd.org"))))
         (stuck ""
                ((org-agenda-overriding-header "\nStuck projects:")
                 (org-agenda-prefix-format "  ")
                 (org-agenda-files '("~/Org/gtd.org"))))
        (tags "inbox"
              ((org-agenda-overriding-header "\nInbox:")
               (org-agenda-prefix-format "  ")
               (org-agenda-files '("~/Org/inbox.org"))))
         (tags "wait"
              ((org-agenda-overriding-header "\nWaiting list:")
               (org-agenda-prefix-format "  ")
               (org-agenda-files '("~/Org/gtd.org"))))
       (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today:")
                 (org-agenda-prefix-format "  %?b")
                 (org-agenda-files '("~/Org/gtd.org")))))
         ((org-agenda-compact-blocks t)))))

 (setq org-tags-column 0)
 (setq org-agenda-breadcrumbs-separator "/")
 (setq org-agenda-dim-blocked-tasks nil)

#+end_src
* Elfeed
#+begin_src emacs-lisp
     (use-package elfeed
     :ensure t
     :init
     (add-hook 'elfeed-search-mode-hook #'elfeed-update))
     (defun elfeed-play-with-mpv ()
     "Play entry link with mpv."
     (interactive)
     (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
     (message "Opening link with mpv...")
     (start-process "elfeed-mpv" nil "mpv"  (elfeed-entry-link entry))))
     (define-key elfeed-search-mode-map "m" #'elfeed-play-with-mpv)

  (use-package elfeed-org
       :ensure t
       :init
       (setq rmh-elfeed-org-files (list "~/Org/elfeed.org"))
       :config
       (elfeed-org))
#+end_src
* Which-key
#+begin_src emacs-lisp
      (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+end_src
* Vertico
#+begin_src emacs-lisp
  (use-package vertico
  :ensure t
  :init
  (vertico-mode))
#+end_src
